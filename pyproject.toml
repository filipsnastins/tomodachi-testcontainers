[tool.poetry]
name = "tomodachi-testcontainers"
version = "1.1.0"
description = "Collection of Testcontainers, pytest fixtures and test clients for end-to-end/integration testing for Python Tomodachi framework. A great starting point to learn more about Testcontainers and necessity of integration testing."
authors = ["Filips Nastins <nastinsfilips@gmail.com>"]
license = "MIT"
readme = "README.md"

homepage = "https://github.com/filipsnastins/tomodachi-testcontainers"
repository = "https://github.com/filipsnastins/tomodachi-testcontainers"

[tool.poetry.extras]
db = ["sqlalchemy"]
mysql = ["sqlalchemy", "pymysql", "cryptography"]
postgres = ["sqlalchemy", "psycopg"]
sftp = ["asyncssh"]
wiremock = ["wiremock"]

[tool.poetry.dependencies]
python = "^3.8.1"
aiobotocore = "^2.4.2"
asyncssh = { version = "^2.13.2", optional = true }
cryptography = { version = ">=41,<43", optional = true }
protobuf = "^4.0"
psycopg = { version = "^3.1.18", optional = true }
pymysql = { version = "^1.1.0", optional = true }
pytest = ">=7.1.2,<9.0.0"
pytest-asyncio = "0.23.5" # https://github.com/pytest-dev/pytest-asyncio/issues/706
requests = "^2.31.0"
shortuuid = "^1.0.11"
sqlalchemy = { version = ">=1.3,<3", optional = true }
tenacity = "^8.2.2"
testcontainers = "^3.7.1"
types-aiobotocore = { extras = [
    "dynamodb",
    "iam",
    "lambda",
    "s3",
    "sns",
    "sqs",
    "ssm",
], version = "^2.4.2" }
wiremock = { version = "^2.6.1", optional = true }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
autoflake = "^2.1.1"
bandit = "^1.7.5"
black = "^24.1.1"
colorama = "^0.4.6"
flake8 = "^7.0.0"
flake8-annotations = ">=2.9.1,<4.0.0"
flake8-black = "^0.3.6"
flake8-bugbear = ">=23.3.12,<25.0.0"
flake8-executable = "^2.1.3"
flake8-isort = "^6.1.0"
flake8-junit-report = "^2.1.0"
flake8-literal = "^1.3.0"
flake8-no-pep420 = "^2.7.0"
flake8-pyproject = "^1.2.3"
flake8-pytest-style = "^1.7.2"
flake8-return = "^1.2.0"
flake8-simplify = "^0.21.0"
flake8-use-pathlib = "^0.3.0"
httpx = ">=0.25,<0.27"
isort = "^5.12.0"
mypy = "^1.4.1"
pre-commit = "^3.3.3"
pydantic = "^2.0.2"
pylint = "^3.0.2"
pytest-cov = "^4.1.0"
pytest-env = "^1.0.1"
pytest-testdox = "^3.1.0"
pytest-xdist = "^3.5.0"
ruff = ">=0.1.5,<0.3.0"
structlog = ">=23.3,<25.0"
tomodachi = "^0.27.0"
types-protobuf = "^4.23.0.2"
types-requests = "^2.31.0.2"

[tool.poetry.group.docs.dependencies]
griffe-typingdoc = "^0.2.4"
mkdocs-glightbox = "^0.3.6"
mkdocs-material = "^9.4.14"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }

[tool.poetry.plugins."pytest11"]
tomodachi_testcontainers = "tomodachi_testcontainers.fixtures"

[tool.poetry.scripts]
hooks = "dev:hooks"
format = "dev:format"
lint = "dev:lint"
test = "dev:test"
test-docs-src = "dev:test_docs_src"
test-ci = "dev:test_ci"

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '\.git/|\.mypy_cache/|\.venv/|\.pytest_cache/|\.vscode/|__pycache__/|build/|dist/'

[tool.isort]
profile = "black"
line_length = 120
skip = [
    ".git",
    ".ruff_cache",
    ".mypy_cache",
    ".venv",
    ".pytest_cache",
    ".vscode",
    "__pycache__",
    "build",
    "dist",
]

[tool.bandit]
exclude_dirs = [
    ".git",
    ".ruff_cache",
    ".mypy_cache",
    ".venv",
    ".pytest_cache",
    ".vscode",
    "__pycache__",
    "build",
    "dist",
]

[tool.flake8]
ignore = [
    "ANN101",
    "ANN401",
    "BLK100",
    "E231",
    "E501",
    "E704",
    "LIT101",
    "PL123",
]
literal-inline-quotes = "double"
literal-multiline-quotes = "double"
exclude = [
    ".git",
    ".ruff_cache",
    ".mypy_cache",
    ".venv",
    ".pytest_cache",
    ".vscode",
    "__pycache__",
    "build",
    "dist",
]
extend-exclude = ["tests/clients/proto"]
per-file-ignores = [
    "docs_src/**/*.py:E402",
    "tests/services/test_service_healthcheck.py:E402",
]

[tool.ruff]
target-version = "py38"
line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
extend-exclude = ["tests/clients/proto"]

[tool.ruff.lint.extend-per-file-ignores]
"docs_src/**/*.py" = ["E402"]
"tests/services/test_service_healthcheck.py" = ["E402"]

[tool.mypy]
python_version = "3.8"
ignore_missing_imports = true

[tool.pytest.ini_options]
log_level = "INFO"
testpaths = ["tests"]
env = [
    # Set dummy AWS credentials so that we don't accidentally mutate real infrastructure
    "AWS_REGION=us-east-1",
    "AWS_DEFAULT_REGION=us-east-1",
    "AWS_ACCESS_KEY_ID=testing",
    "AWS_SECRET_ACCESS_KEY=testing",
    "AWS_SECURITY_TOKEN=testing",
    "AWS_SESSION_TOKEN=testing",
    # Testcontainers configuration
    "DOCKER_BUILDKIT=1",
    "TESTCONTAINER_DOCKER_NETWORK=tomodachi-testcontainers",
    "TESTCONTAINER_DOCKERFILE_PATH=examples/Dockerfile",
    "TESTCONTAINER_DOCKER_BUILD_CONTEXT=examples",
    "TESTCONTAINER_DOCKER_BUILD_TARGET=test",
    # WireMock Testcontainer configuration
    "WIREMOCK_TESTCONTAINER_MAPPING_STUBS=tests/containers/test-wiremock-container/mappings",
    "WIREMOCK_TESTCONTAINER_MAPPING_FILES=tests/containers/test-wiremock-container/files",
    "WIREMOCK_TESTCONTAINER_VERBOSE=1",
]

[tool.coverage.run]
branch = true
relative_files = true
source = ["src/", "tests/"]
omit = ["tests/clients/proto/*"]

[tool.coverage.paths]
source = ["examples/", "src/", "/app"]

[tool.coverage.report]
omit = ["docs_src/"]
skip_covered = true
show_missing = true
include_namespace_packages = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
